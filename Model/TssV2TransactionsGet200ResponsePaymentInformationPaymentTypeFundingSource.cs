/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource
    /// </summary>
    [DataContract]
    public partial class TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource :  IEquatable<TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource" /> class.
        /// </summary>
        /// <param name="Name">A Payment Type Funding Source is the Financial Account which holds the financial assets used to fund a transaction initiated with a given Payment Type. Examples: Bank of America Debit, Wells Consumer Checking .</param>
        /// <param name="Type">It is type of funding source. Examples: US Checking Account, Credit Account, Stored Value Account .</param>
        /// <param name="Credential">It is the credential of the funding source. Examples: Credit Card PAN, Checking Account Number .</param>
        /// <param name="Affiliations">It is affiliation of funding source such as Visa, Master Card, ACH. .</param>
        /// <param name="Underwriter">It is underwrite for the given funding source. Examples: Bank of America, Wells Fargo, PayPal .</param>
        public TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource(string Name = default(string), string Type = default(string), string Credential = default(string), string Affiliations = default(string), string Underwriter = default(string))
        {
            this.Name = Name;
            this.Type = Type;
            this.Credential = Credential;
            this.Affiliations = Affiliations;
            this.Underwriter = Underwriter;
        }
        
        /// <summary>
        /// A Payment Type Funding Source is the Financial Account which holds the financial assets used to fund a transaction initiated with a given Payment Type. Examples: Bank of America Debit, Wells Consumer Checking 
        /// </summary>
        /// <value>A Payment Type Funding Source is the Financial Account which holds the financial assets used to fund a transaction initiated with a given Payment Type. Examples: Bank of America Debit, Wells Consumer Checking </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// It is type of funding source. Examples: US Checking Account, Credit Account, Stored Value Account 
        /// </summary>
        /// <value>It is type of funding source. Examples: US Checking Account, Credit Account, Stored Value Account </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// It is the credential of the funding source. Examples: Credit Card PAN, Checking Account Number 
        /// </summary>
        /// <value>It is the credential of the funding source. Examples: Credit Card PAN, Checking Account Number </value>
        [DataMember(Name="credential", EmitDefaultValue=false)]
        public string Credential { get; set; }

        /// <summary>
        /// It is affiliation of funding source such as Visa, Master Card, ACH. 
        /// </summary>
        /// <value>It is affiliation of funding source such as Visa, Master Card, ACH. </value>
        [DataMember(Name="affiliations", EmitDefaultValue=false)]
        public string Affiliations { get; set; }

        /// <summary>
        /// It is underwrite for the given funding source. Examples: Bank of America, Wells Fargo, PayPal 
        /// </summary>
        /// <value>It is underwrite for the given funding source. Examples: Bank of America, Wells Fargo, PayPal </value>
        [DataMember(Name="underwriter", EmitDefaultValue=false)]
        public string Underwriter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Credential: ").Append(Credential).Append("\n");
            sb.Append("  Affiliations: ").Append(Affiliations).Append("\n");
            sb.Append("  Underwriter: ").Append(Underwriter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource);
        }

        /// <summary>
        /// Returns true if TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource instances are equal
        /// </summary>
        /// <param name="other">Instance of TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Credential == other.Credential ||
                    this.Credential != null &&
                    this.Credential.Equals(other.Credential)
                ) && 
                (
                    this.Affiliations == other.Affiliations ||
                    this.Affiliations != null &&
                    this.Affiliations.Equals(other.Affiliations)
                ) && 
                (
                    this.Underwriter == other.Underwriter ||
                    this.Underwriter != null &&
                    this.Underwriter.Equals(other.Underwriter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Credential != null)
                    hash = hash * 59 + this.Credential.GetHashCode();
                if (this.Affiliations != null)
                    hash = hash * 59 + this.Affiliations.GetHashCode();
                if (this.Underwriter != null)
                    hash = hash * 59 + this.Underwriter.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
